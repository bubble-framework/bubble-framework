name: deploy on pull
on: pull_request

env:
  NODE_VERSION: 16.15.1
  AWS_ACCESS_KEY_ID: ${{ secrets.BUBBLE_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.BUBBLE_AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  PR_NAME: ${{ github.event.pull_request.title }}
  PR_NUMBER: ${{ github.event.number }}
  REPO_NAME: ${{ github.event.repository.name }}
  COMMIT_ID: ${{ github.event.pull_request.head.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Notify about starting this deployment
        uses: hasura/comment-progress@v2.1.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          number: ${{ env.PR_NUMBER }}
          id: deploy-preview
          message: "Starting deployment of this pull request."
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - name: export env variables
        run: |
          export AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
      - name:
        uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}
      - name: create serverless yaml file
        run: |
          touch serverless.yml
      - name: add config to serverless yaml file
        id: config
        uses: mikefarah/yq@master
        with:
          cmd: yq -i e '.myNextApplication.component = "@sls-next/serverless-component@latest"' serverless.yml
      - name: deploy with serverless framework
        run: |
          npm install
          npm install @sls-next/serverless-component
          npx serverless@2.72.2
      - name: configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: display the cloudfront link
        id: url
        uses: notiz-dev/github-action-json-property@release
        with:
          path: "./.serverless/Template.myNextApplication.CloudFront.json"
          prop_path: "url"
      - name: output the S3 bucket
        id: bucket
        uses: notiz-dev/github-action-json-property@release
        with:
          path: "./.serverless/Template.myNextApplication.AwsS3.json"
          prop_path: "name"
      - name: output the CloudFront Distribution Id
        id: distributionid
        uses: notiz-dev/github-action-json-property@release
        with:
          path: "./.serverless/Template.myNextApplication.CloudFront.json"
          prop_path: "id"
      - name: output subdomain
        uses: satackey/action-js-inline@v0.0.2
        id: getsubdomain
        with:
          script: |
            const core = require('@actions/core')
            const subdomain = "${{ steps.url.outputs.prop }}".split('.')[0].split('/')[2]
            core.setOutput('subdomain', subdomain)
      - name: output timestamp
        uses: satackey/action-js-inline@v0.0.2
        id: gettimestamp
        with:
          script: |
            const core = require('@actions/core')
            const dateTimeNow = new Date()
            const timestamp = dateTimeNow.toISOString()
            core.setOutput('timestamp', timestamp)
      - name: get commit message
        run: echo "COMMIT_MESSAGE=$(git log --format=%B -n 1 ${{ github.event.after }})" >> $GITHUB_ENV
      - name: get preview app data from DynamoDB
        uses: mathiasvr/command-output@v1
        id: previewappdata
        with:
          run: |
            aws dynamodb get-item --table-name ${{ env.REPO_NAME }}-PreviewApps --key '{ "PullRequestId": {"N": "${{ env.PR_NUMBER }}"}}'
      - name: output index of new commit when pull request exists
        uses: satackey/action-js-inline@v0.0.2
        if: ${{ steps.previewappdata.outputs.stdout }}
        id: getindex
        with:
          script: |
            const core = require('@actions/core')
            let commitsArray = ${{steps.previewappdata.outputs.stdout}}
            let index = commitsArray.Item.Commits.L.length
            core.setOutput('index', index)
      - name: create first-time entry for PR in DynamoDB
        if: ${{ !steps.previewappdata.outputs.stdout }}
        run: |
          aws dynamodb put-item --table-name ${{ env.REPO_NAME }}-PreviewApps --item '{ "PullRequestId": {"N": "${{ env.PR_NUMBER }}" }}'
          aws dynamodb update-item --table-name ${{ env.REPO_NAME }}-PreviewApps --key '{ "PullRequestId": {"N": "${{ env.PR_NUMBER }}"}}' --update-expression "SET PRName = :newval" --expression-attribute-values '{":newval":{"S":"${{ env.PR_NAME }}"}}' --return-values ALL_NEW
          aws dynamodb update-item --table-name ${{ env.REPO_NAME }}-PreviewApps --key '{ "PullRequestId": {"N": "${{ env.PR_NUMBER }}"}}' --update-expression "SET IsActive = :newval" --expression-attribute-values '{":newval":{"BOOL":true}}' --return-values ALL_NEW
          aws dynamodb update-item --table-name ${{ env.REPO_NAME }}-PreviewApps --key '{ "PullRequestId": {"N": "${{ env.PR_NUMBER }}"}}' --update-expression "SET Commits = :newval" --expression-attribute-values '{":newval":{"L":[]}}' --return-values ALL_NEW
          aws dynamodb update-item --table-name ${{ env.REPO_NAME }}-PreviewApps --key '{ "PullRequestId": {"N": "${{ env.PR_NUMBER }}"}}' --update-expression "SET Commits[0] = :newval" --expression-attribute-values '{":newval":{"M":{"CommitId": {"S": "${{ env.COMMIT_ID }}"}, "CloudFrontDistroId": {"S": "${{ steps.distributionId.outputs.prop }}"}, "BucketId": {"S": "${{ steps.bucket.outputs.prop }}"}, "CommitMessageHeader": {"S": "${{ env.COMMIT_MESSAGE }}"}, "CloudfrontSubdomain": {"S": "${{ steps.getsubdomain.outputs.subdomain }}"}, "CreatedAt": {"S": "${{ steps.gettimestamp.outputs.timestamp }}"}}}}' --return-values ALL_NEW
      - name: update PR in DynamoDB with new commit preview app data
        if: ${{ steps.previewappdata.outputs.stdout }}
        run: |
          aws dynamodb update-item --table-name ${{ env.REPO_NAME }}-PreviewApps --key '{ "PullRequestId": {"N": "${{ env.PR_NUMBER }}"}}' --update-expression "SET Commits[${{steps.getindex.outputs.index}}] = :newval" --expression-attribute-values '{":newval":{"M":{"CommitId": {"S": "${{ env.COMMIT_ID }}"}, "CloudFrontDistroId": {"S": "${{ steps.distributionId.outputs.prop }}"}, "BucketId": {"S": "${{ steps.bucket.outputs.prop }}"}, "CommitMessageHeader": {"S": "${{ env.COMMIT_MESSAGE }}"}, "CloudfrontSubdomain": {"S": "${{ steps.getsubdomain.outputs.subdomain }}"}, "CreatedAt": {"S": "${{ steps.gettimestamp.outputs.timestamp }}"}}}}' --return-values ALL_NEW
      - name: Notify about the result of this deployment
        uses: hasura/comment-progress@v2.1.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          number: ${{ env.PR_NUMBER }}
          id: deploy-preview
          message: |
            Deployment of a preview for this pull request was successful. The link is at ${{ steps.url.outputs.prop }}
          recreate: true
